

from flask_simple_alchemy import SimpleAlchemy

from testers import db

this_table = SimpleAlchemy(db)


class WillItWorkQuestionMark(db.Model, this_table.IsASimpleTable):
    __tablename__ = 'willitworkquestionmark'
    strings = ['did', 'it', 'work']


class ClarkKent(db.Model):
    __tablename__  = "clarkkent"
    id = db.Column(db.Integer, primary_key=True)
    height = db.Column(db.Float)
    weight = db.Column(db.Float)
    heart_rate = db.Column(db.Integer)
    powers = db.Column(db.String)
    date_of_birth = db.Column(db.Date)

class Superman(db.Model, this_table.IsASimpleTable):
    __tablename__ = 'superman'
    floats = ['height', 'weight']
    integers = ['heart_rate']
    strings = ['powers']
    dates = ['date_of_birth']


def test_SimpleTable_automatic_id_attribute():
    assert WillItWorkQuestionMark.id is not None
    assert WillItWorkQuestionMark.id.primary_key == True

def test_SimpleTable_strings_property():
    assert WillItWorkQuestionMark.did is not None
    assert WillItWorkQuestionMark.it is not None
    assert WillItWorkQuestionMark.work is not None
    try:
        assert WillItWorkQuestionMark.doesnt_exist is None
    except:
        assert True
    else:
        assert False


def test_autogenerated_attrs():
    sqltype_attrs = ['text', 'datetime', 'bigint', 'varbinary', 'numeric',
                      'binary', 'smallinteger', 'datetime', 'numeric',
                      'unicodetext', 'string', 'integer', 'pickletype',
                      'nvarchar', 'nchar', 'biginteger', 'integer',
                      'timestamp', 'blob', 'unicode', 'time', 'real', 'binary',
                      'char', 'enum', 'date', 'integer', 'decimal', 'interval',
                      'time', 'text', 'boolean', 'float', 'clob', 'date',
                      'smallint', 'varchar', 'typedecorator', 'largebinary',
                      'float', 'boolean'
                      ]
    plurals = [name + 's' for name in sqltype_attrs]
    for item in plurals:
        assert getattr(WillItWorkQuestionMark, item, False)


def test_superman_vs_clark_kent():
    for key, value in ClarkKent.__dict__.items():
        assert key in Superman.__dict__
        #assert Superman.__dict__[key] == value
